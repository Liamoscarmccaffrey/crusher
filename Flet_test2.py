import sqlite3
from openai import OpenAI
import os
import flet as ft
import re

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def fetch_database_contents(db_file, table_name):
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM {table_name}")
    rows = cursor.fetchall()
    headers = [description[0] for description in cursor.description]
    conn.close()
    return headers, rows

def is_url(string):
    url_regex = re.compile(r'^(https?:\/\/)?([\w\-.]+)+(:\d+)?(\/.*)?$')
    return re.match(url_regex, string) is not None

def generate_summary(content):
    try:
        response = client.chat.completions.create(model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a helpful assistant that summarizes articles."},
            {"role": "user", "content": f"Summarize the following article:\n\n{content}"}
        ],
        temperature=0.7,
        max_tokens=500)
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error generating summary: {str(e)}"

def answer_question(content, question):
    try:
        response = client.chat.completions.create(model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a helpful assistant that answers questions about articles."},
            {"role": "user", "content": f"The following is an article:\n\n{content}\n\nAnswer the question: {question}"}
        ],
        max_tokens=500)
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error answering question: {str(e)}"

def generate_contrary_opinion(content):
    try:
        response = client.chat.completions.create(model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a supply chain expert. You work for Peak AI. You respond to articles generated by competitors, and generate short, but meaningful arguments against the claims made."},
            {"role": "user", "content": f"Provide criticism, a contrary opinion to the following article:\n\n{content}"}
        ],
        temperature=0.9,
        max_tokens=500)
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error generating contrary opinion: {str(e)}"

def main(page: ft.Page):
        # Set theme
    page.theme = ft.Theme(
        color_scheme=ft.ColorScheme(
            primary=ft.Colors.GREEN,
            primary_container=ft.Colors.GREEN_200
            # ... 
        ),
        )
    page.title = "Competitor Content Directory"
    page.scroll = "adaptive"
    page.window_width = 1000
    page.window_height = 800

    db_file = "kinaxis.db"
    table_name = "blogs"

    headers, rows = fetch_database_contents(db_file, table_name)

    search_field = ft.TextField(hint_text="Search...", on_change=lambda e: update_table(e.control.value))
    
    def view_content(e):
        data = e.control.data
        content = data["content"]
        title = data["title"]
        page.go(f"/content?data={content}&title={title}")

    def view_summary(e):
        data = e.control.data
        content = data["content"]
        summary = generate_summary(content)
        page.go(f"/summary?summary={summary}&title={data['title']}")

    def create_table(filtered_rows):
        data_rows = []
        for row in filtered_rows:
            cells = []
            for header, cell in zip(headers, row):
                if header == "id":
                    continue
                cell_content = str(cell)
                if header == "content":
                    cells.append(ft.DataCell(ft.TextButton(
                        text="Read article",
                        data={"content": cell, "title": row[headers.index("title")]},
                        on_click=view_content
                    )))
                    cells.append(ft.DataCell(ft.TextButton(
                        text="AI Summary",
                        data={"content": cell, "title": row[headers.index("title")]},
                        on_click=view_summary
                    )))
                elif is_url(cell_content):
                    cells.append(ft.DataCell(ft.TextButton(text="Open", url=cell_content)))
                else:
                    cells.append(ft.DataCell(ft.Text(cell_content)))
            data_rows.append(ft.DataRow(cells=cells))

        return ft.DataTable(
            columns=[ft.DataColumn(ft.Text(header)) for header in headers if header != "id"] + [ft.DataColumn(ft.Text("Summary"))],
            rows=data_rows,
            column_spacing=15,
            data_row_max_height=float("inf")
        )

    table = create_table(rows)
    table_container = ft.Column([table], scroll=ft.ScrollMode.ADAPTIVE, expand=True)

    def update_table(query):
        filtered_rows = [row for row in rows if any(query.lower() in str(cell).lower() for cell in row)]
        table_container.controls[0] = create_table(filtered_rows)
        page.update()

    def route_change(event):
        page.views.clear()
        if event.route.startswith("/content"):
            query_params = page.query
            content = query_params.get("data") or "No content available"
            title = query_params.get("title") or "Article Content"

            def generate_opinion(e):
                opinion = generate_contrary_opinion(content)
                page.views.append(
                    ft.View(
                        route="/contrary",
                        controls=[
                            ft.Column([
                                ft.Text("Contrary Opinion", size=24, weight="bold"),
                                ft.Text(opinion, selectable=True, size=16, no_wrap=False),
                                ft.ElevatedButton("Back", on_click=lambda _: page.go(f"/content?data={content}&title={title}"))
                            ])
                        ]
                    )
                )
                page.update()

            page.views.append(
                ft.View(
                    route="/content",
                    controls=[
                        ft.Column(
                            controls=[
                                ft.Text(title, size=24, weight="bold"),
                                ft.Text(content, selectable=True, size=16, no_wrap=False),
                                ft.ElevatedButton("Generate Contrary Opinion", on_click=generate_opinion),
                                ft.ElevatedButton("Back", on_click=lambda _: page.go("/"))
                            ],
                            scroll=ft.ScrollMode.ADAPTIVE,
                            expand=True
                        )
                    ]
                )
            )
        elif event.route.startswith("/summary"):
            query_params = page.query
            summary = query_params.get("summary") or "No summary available"
            title = query_params.get("title") or "Article Summary"
            page.views.append(
                ft.View(
                    route="/summary",
                    controls=[
                        ft.Column(
                            controls=[
                                ft.Text(title, size=24, weight="bold"),
                                ft.Text(summary, selectable=True, size=16, no_wrap=False),
                                ft.ElevatedButton("Back", on_click=lambda _: page.go("/"))
                            ],
                            scroll=ft.ScrollMode.ADAPTIVE,
                            expand=True
                        )
                    ]
                )
            )
        elif event.route == "/":
            page.views.append(
                ft.View(
                    route="/",
                    controls=[
                        ft.Text("Competitor Content Directory", size=20, weight="bold"),
                        search_field,
                        table_container
                    ]
                )
            )
        page.update()

    page.on_route_change = route_change
    page.go("/")

if __name__ == "__main__":
    ft.app(target=main)